// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1652,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xe3\xc6\x5d\x3a\x74\xba\x05\x45\x87\x05\x6b\xb1\x60\x49\x77\x1d\x18\x99\x73\xb4\xca\x92\x20\xd1\x6e\xdc\xaf\x1f\x64\x3b\x8e\xd3\xb4\x58\x73\xb3\xc9\xc7\x47\x89\x8f\x4f\xe8\xd4\x2f\xf2\x41\x59\x23\x40\x05\x56\x36\xdd\xa0\x79\x41\x25\xb5\xad\xf2\x54\xd9\xcb\x3a\xdb\x10\x63\x96\x3c\x29\x93\x0b\x58\x44\x48\x52\x12\x63\x8e\x8c\x22\x01\x30\x58\x92\x80\x92\xc2\x36\x09\x8e\x64\x0c\xd5\x7b\xc2\x8b\x2c\x9d\xa5\xb3\x8b\x04\xa0\x64\x1d\x04\xfc\x41\x1d\x28\x01\xc0\x8a\xed\x43\x1b\x61\x5f\xc5\x40\x2c\xbf\xdb\x39\x34\x5d\x5d\x1f\x95\xd6\xb0\xb7\x7a\xa9\xd1\xd0\x8a\x64\xe5\x15\x37\x77\x06\x37\x9a\xf2\x01\x13\x54\x4e\x12\xfd\xc2\xfc\x25\xc9\xd6\xc7\xf6\x00\x9e\x9e\xbd\x62\x9a\x3b\xf7\x6d\xbd\x5e\x2e\xbd\xdd\xd0\x50\xa0\x4a\x2c\x68\x59\x69\xbd\xb4\x5a\xc9\x46\xc0\x5c\x3f\x63\x13\x12\x80\x02\x99\xe2\x67\xc7\xa1\x4c\xe1\x29\xf4\x3f\x00\x25\xee\x7e\x92\xd3\x4a\x62\x10\x90\xf5\x41\x67\x3d\x0f\x88\x49\x3f\x8a\xc0\xc8\x55\x98\xc4\x5c\x9f\xe9\x80\x02\xb2\xeb\xe9\xd5\xf4\x10\xf3\x96\xad\xb4\x5a\xc0\xfa\x76\x39\x44\x19\x7d\x41\xbc\x3c\xc1\xef\xd9\xb7\xcc\xee\xea\x15\xef\xcd\x39\xa4\x37\x6f\x31\x86\x57\x8c\xb3\xd9\xa7\x33\x28\x0f\xe8\x3d\x27\xeb\xd7\x8c\xd9\xf5\x79\x9c\x63\xfc\xc0\x2a\xdd\x04\x75\x98\x9c\xb2\x5f\x4f\x3f\x4f\xcf\x19\xc2\x18\x3f\x66\x7f\x51\xee\x49\x99\xb7\x1a\x7c\x99\x65\xd9\x39\x0d\x06\x3c\x1d\xad\x11\xed\xd7\x77\x6f\x05\xa7\xb4\xe5\x2e\x7b\xb4\x62\x9d\xc6\xed\xb2\x0a\x18\x59\xf2\xb2\x35\xe9\xa4\x2b\x6b\xed\x35\xd9\xbc\xc8\xa4\x3d\xd3\xae\x11\xff\xa9\x8a\x98\xfa\xea\xa8\x0e\xa0\x0a\xf4\xd0\x1b\xfa\x6e\x27\xb7\x68\x0a\xfa\xaa\x34\x93\x1f\x3c\x13\xcf\x5d\xdb\x66\x2e\x25\x85\x70\x6f\x8b\x15\xf9\x5a\x49\x3a\xb9\xd4\x00\x07\xd8\xda\xc0\xf1\x08\xf2\xa9\x41\x9f\x87\xa8\x5b\x7a\xf8\x0b\x4d\x60\x2a\xd3\x50\xcb\x54\xea\x2a\x30\xf9\x54\x5b\x89\x3a\x79\x4f\x54\x96\xee\x3b\x91\x43\xad\xea\xa1\x6d\xf4\x28\x93\xaf\x51\x0b\xc8\xa6\x61\xac\xce\x86\x82\x80\xc3\xba\xb1\x8a\x02\x1f\x30\xac\xc3\x8a\x98\x95\x29\xc2\x81\xac\xb4\x39\x09\x58\xac\xd6\x8b\x1f\xbf\x1f\x1e\xd7\x8f\xf3\xfb\xf8\x30\xa9\x1d\xf9\xf3\xe5\xe9\xca\x8e\xc7\x5c\x56\x9a\xd5\x6d\x77\xdb\x55\xe5\xba\x3b\xf6\x13\x63\xd2\x54\x12\xfb\xe6\x9d\x56\xae\x7b\xab\x4e\x93\x71\xc7\xd8\xa3\x54\xa6\x10\xc9\xdb\x5a\xc4\x74\xd4\xb2\xdb\xed\x36\xd4\x7d\xee\xaf\x8e\x79\xde\xae\xe8\x48\xad\x0e\xf0\x01\xc1\xc4\xd8\x18\x1f\x1d\xeb\xbf\x00\x00\x00\xff\xff\x77\x8c\x4d\x79\x74\x06\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
