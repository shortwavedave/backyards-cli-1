{{- if .Values.application.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backyards.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "backyards.name" . }}
    app.kubernetes.io/name: {{ include "backyards.name" . }}
    helm.sh/chart: {{ include "backyards.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: {{ include "backyards.name" . }}
spec:
{{- if .Values.autoscaling.enabled }}
  replicas: {{ .Values.autoscaling.minReplicas }}
{{- else }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: {{ include "backyards.name" . }}
      app.kubernetes.io/name: {{ include "backyards.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: application
      app.kubernetes.io/part-of: {{ include "backyards.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "backyards.name" . }}
        app.kubernetes.io/name: {{ include "backyards.name" . }}
        helm.sh/chart: {{ include "backyards.chart" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: {{ include "backyards.name" . }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10000"
        {{- if .Values.als.enabled }}
        traffic.sidecar.istio.io/excludeOutboundPorts: "50600"
        {{- end }}
    spec:
      serviceAccountName: {{ include "backyards.fullname" . }}
      containers:
      {{- if .Values.web.enabled }}
        - name: {{ .Chart.Name }}-web
          image: "{{ required "An web image name is required!" .Values.web.image.repository }}:{{ required "An web image tag is required!" .Values.web.image.tag }}"
          imagePullPolicy: {{ .Values.web.image.pullPolicy }}
          env:
            - name: PORT
              value: "8001"
          {{- range .Values.web.envSecrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  {{ toYaml .secretKeyRef | nindent 16 }}
          {{- end }}
          {{- range .Values.web.envResourceField }}
            - name: {{ .name }}
              valueFrom:
                resourceFieldRef:
                  {{ toYaml .resourceFieldRef | nindent 16 }}
          {{- end }}
          {{- range $name, $value := .Values.web.env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
          {{- end }}
          ports:
            - name: http-web
              containerPort: 8001
              protocol: TCP
          {{- with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
        - name: {{ .Chart.Name }}
          image: "{{ required "An application image name is required!" .Values.application.image.repository }}:{{ required "An application image tag is required!" .Values.application.image.tag }}"
          imagePullPolicy: {{ .Values.application.image.pullPolicy }}
          ports:
            - name: http-app
              containerPort: 8000
              protocol: TCP
            - name: instrumentation
              containerPort: 10000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /version
              port: instrumentation
          readinessProbe:
            httpGet:
              path: /healthz
              port: instrumentation
          {{- with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          env:
          {{- range .Values.application.envSecrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  {{ toYaml .secretKeyRef | nindent 16 }}
          {{- end }}
          {{- range .Values.application.envResourceField }}
            - name: {{ .name }}
              valueFrom:
                resourceFieldRef:
                  {{ toYaml .resourceFieldRef | nindent 16 }}
          {{- end }}
          {{- range $name, $value := .Values.application.env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
          {{- end }}
            - name: APP_ISTIOCRNAME
              value: {{ .Values.istio.CRName | quote }}
            - name: APP_ISTIOCRNAMESPACE
              value: {{ .Values.istio.namespace | quote }}
          {{- if .Values.prometheus.enabled }}
            - name: APP_PROMETHEUS
              value: "http://{{ include "prometheus.fullname" . }}:{{ .Values.prometheus.service.port }}{{ .Values.prometheus.externalUrl }}"
          {{- else }}
            - name: APP_PROMETHEUS
              value: {{ (required "Prometheus URL is required!" .Values.prometheus.url) | quote }}
          {{- end }}
          {{- if .Values.auditsink.enabled }}
            - name: AUDITSINK_MODE
              value: "{{ .Values.auditsink.mode }}"
            - name: AUDITSINK_HTTP_URL
              value: "https://{{ include "auditsink.fullname" . }}"
            - name: AUDITSINK_HTTP_CACERT
              value: "/certs/auditsink/ca.crt"
            - name: AUDITSINK_HTTP_TIMEOUT
              value: "{{ .Values.auditsink.http.timeout }}"
            - name: AUDITSINK_HTTP_RETRY_WAIT_MIN
              value: "{{ .Values.auditsink.http.retryWaitMin }}"
            - name: AUDITSINK_HTTP_RETRY_WAIT_MAX
              value: "{{ .Values.auditsink.http.retryWaitMax }}"
            - name: AUDITSINK_HTTP_RETRY_MAX
              value: "{{ .Values.auditsink.http.retryMax }}"
            - name: AUDITSINK_HTTP_PANIC_ON_FAILURE
              value: "{{ .Values.auditsink.http.panicOnFailure }}"
          {{- end }}
            - name: AUTH_MODE
              value: "{{ .Values.auth.mode }}"
          {{- if .Values.auth.jwtSigningKeySecret }}
            - name: AUTH_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  {{ toYaml .Values.auth.jwtSigningKeySecret | nindent 16 }}
          {{- else }}
            - name: AUTH_JWT_SIGNING_KEY_FILE
              value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          {{- end }}
          {{- if .Values.als.enabled }}
            - name: ALS_ADDRESS
              value: "backyards-als.{{ .Release.Namespace }}.svc.cluster.local:50600"
          {{- end }}
          volumeMounts:
          {{- if .Values.auditsink.enabled }}
            - name: auditsink-cert
              mountPath: /certs/auditsink/ca.crt
              subPath: ca.crt
          {{- end }}
      volumes:
        {{- if and .Values.auditsink.enabled }}
        - name: auditsink-cert
          secret:
            secretName: {{ include "auditsink.fullname" . }}-certs
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
